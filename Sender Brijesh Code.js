/**
 * Google Apps Script to combine rows by sender and email as CSV
 * 
 * Instructions:
 * 1. Open Google Apps Script (script.google.com)
 * 2. Create a new project
 * 3. Replace the default code with this script
 * 4. Update the configuration variables below
 * 5. Save and run the script
 */

// CONFIGURATION - Update these variables
const SPREADSHEET_ID = '1NgfgYTqFA8o0vGV30o3IkjaQC_21brlnc7ZzVdvRS4Q'; // Replace with your Google Sheet ID
const SHEET_NAME = 'Sender Import'; // Replace with your sheet name if different
const RECIPIENT_EMAIL = '	sankalpmodi5@gmail.com'; // Replace with target email address
const SENDER_COLUMN = 'Sender'; // Column that contains sender information

function combineSenderRowsAndEmail() {
  try {
    // Open the spreadsheet
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      throw new Error(`Sheet "${SHEET_NAME}" not found`);
    }
    
    // Get all data
    const data = sheet.getDataRange().getValues();
    
    if (data.length < 2) {
      console.log('No data rows found (only headers or empty sheet)');
      return;
    }
    
    const headers = data[0];
    const rows = data.slice(1);
    
    // Find the sender column index
    const senderColumnIndex = headers.indexOf(SENDER_COLUMN);
    
    if (senderColumnIndex === -1) {
      throw new Error(`Column "${SENDER_COLUMN}" not found in headers`);
    }
    
    // Group rows by sender
    const senderGroups = {};
    
    rows.forEach((row, index) => {
      const sender = row[senderColumnIndex];
      
      // Skip rows with empty sender
      if (!sender || sender.toString().trim() === '') {
        console.log(`Skipping row ${index + 2} - empty sender`);
        return;
      }
      
      const senderKey = sender.toString().trim();
      
      if (!senderGroups[senderKey]) {
        senderGroups[senderKey] = [];
      }
      
      senderGroups[senderKey].push(row);
    });
    
    // Process each sender group
    const senderCount = Object.keys(senderGroups).length;
    console.log(`Found ${senderCount} unique senders`);
    
    for (const [sender, senderRows] of Object.entries(senderGroups)) {
      try {
        // Create CSV content
        const csvContent = createCSV(headers, senderRows);
        
        // Create filename
        const sanitizedSender = sender.replace(/[^a-zA-Z0-9\-_]/g, '_');
        const timestamp = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyy-MM-dd_HH-mm');
        const filename = `${sanitizedSender}_data_${timestamp}.csv`;
        
        // Create blob for attachment
        const blob = Utilities.newBlob(csvContent, 'text/csv', filename);
        
        // Send email
        sendEmailWithCSV(sender, senderRows.length, blob);
        
        console.log(`‚úì Processed sender: ${sender} (${senderRows.length} rows)`);
        
      } catch (error) {
        console.error(`Error processing sender "${sender}":`, error.toString());
      }
    }
    
    console.log(`\n‚úì Script completed successfully!`);
    console.log(`üìß Check ${RECIPIENT_EMAIL} for the CSV files`);
    
  } catch (error) {
    console.error('Script error:', error.toString());
    throw error;
  }
}

function createCSV(headers, rows) {
  // Escape CSV values
  function escapeCSVValue(value) {
    if (value === null || value === undefined) {
      return '';
    }
    
    const stringValue = value.toString();
    
    // If the value contains comma, newline, or quote, wrap in quotes and escape quotes
    if (stringValue.includes(',') || stringValue.includes('\n') || stringValue.includes('"')) {
      return '"' + stringValue.replace(/"/g, '""') + '"';
    }
    
    return stringValue;
  }
  
  // Create CSV content
  const csvLines = [];
  
  // Add headers
  csvLines.push(headers.map(escapeCSVValue).join(','));
  
  // Add data rows
  rows.forEach(row => {
    csvLines.push(row.map(escapeCSVValue).join(','));
  });
  
  return csvLines.join('\n');
}

function sendEmailWithCSV(sender, rowCount, csvBlob) {
  const subject = `Shipping Label for Brijesh's customer: ${sender}`;
  
  const body = `
Hello

Please find attached CSV with details of shipping label for customer: ${sender}
Please generate ${rowCount} labels accordingly.

Best regards,
Narad Muni





Ignore - Autogenerated Text
- Sender: ${sender}
- Number of Labels: ${rowCount}
- Export date: ${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyy-MM-dd HH:mm:ss')}
  `.trim();
  
  // Send email with attachment
  GmailApp.sendEmail(
    RECIPIENT_EMAIL,
    subject,
    body,
    {
      attachments: [csvBlob],
      name: 'Data Export System'
    }
  );
}

// Helper function to get spreadsheet ID from URL
function getSpreadsheetIdFromUrl(url) {
  const match = url.match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
  return match ? match[1] : null;
}

// Test function to verify configuration
function testConfiguration() {
  console.log('Testing configuration...');
  
  try {
    const spreadsheet = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = spreadsheet.getSheetByName(SHEET_NAME);
    
    if (!sheet) {
      console.error(`‚ùå Sheet "${SHEET_NAME}" not found`);
      return false;
    }
    
    const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const senderColumnIndex = headers.indexOf(SENDER_COLUMN);
    
    if (senderColumnIndex === -1) {
      console.error(`‚ùå Column "${SENDER_COLUMN}" not found`);
      console.log('Available columns:', headers.join(', '));
      return false;
    }
    
    console.log('‚úì Configuration looks good!');
    console.log(`‚úì Found sheet: ${SHEET_NAME}`);
    console.log(`‚úì Found sender column: ${SENDER_COLUMN} (index ${senderColumnIndex})`);
    console.log(`‚úì Total columns: ${headers.length}`);
    console.log(`‚úì Total rows: ${sheet.getLastRow()}`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Configuration error:', error.toString());
    return false;
  }
}   